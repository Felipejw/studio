rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the resource's userId matches the authenticated user's UID
    function isOwner(userIdField) {
      return isSignedIn() && request.auth.uid == request.resource.data[userIdField];
    }
    
    function isOwnerById(docId) {
      return isSignedIn() && request.auth.uid == docId;
    }

    // Helper function to get user's plan from their document in 'users' collection
    function getUserPlan() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.plan;
    }

    // Users: Users can read and write their own document.
    // Plan can be updated by the user (simulating subscription choice).
    match /users/{userId} {
      allow read, write: if isOwnerById(userId);
    }

    // Trading Plans: Users can create, read, update, delete their own plans.
    match /trading_plans/{planId} {
      allow read, write: if isOwner('userId');
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    // Trades: Users can create, read, update, delete their own trades.
    match /trades/{tradeId} {
      allow read, write: if isOwner('userId');
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    // Mindset Logs: Users can create, read, update, delete their own logs.
    match /mindset_logs/{logId} {
      allow read, write: if isOwner('userId');
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    // Risk Config: Users can create, read, update, delete their own risk configurations.
    // Assuming one config document per user, identified by userId.
    match /risk_config/{userId} {
      allow read, write: if isOwnerById(userId);
    }

    // Risk Logs (Future): Users can create, read, update, delete their own risk logs.
    // match /risk_logs/{logId} {
    //   allow read, write: if isOwner('userId');
    //   allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    // }

    // Image Analysis (Premium Feature Example):
    // Users can create if they are 'pro' or 'vitalicio'. All users can read their own.
    match /image_analysis/{analysisId} {
      allow read: if isOwner('userId');
      allow create: if isSignedIn() && 
                      request.resource.data.userId == request.auth.uid && 
                      (getUserPlan() == 'pro' || getUserPlan() == 'vitalicio');
      // allow update, delete: if isOwner('userId') ... add plan check if needed for updates
    }

    // Subscriptions (Future): Detailed subscription records, managed by backend typically.
    // match /subscriptions/{subscriptionId} {
    //   allow read: if isOwner('userId');
    //   // Writes to subscriptions would typically be handled by a trusted backend environment
    //   // after a successful payment webhook.
    // }

    // Fallback: Deny all other reads/writes by default.
    // match /{document=**} {
    //   allow read, write: if false;
    // }
  }
}
// IMPORTANT: For initial development WITHOUT AUTHENTICATION, you might temporarily use:
// allow read, write: if true;
// for specific collections to test Firestore integration.
// REMEMBER TO SECURE YOUR RULES BEFORE PRODUCTION.
// The rules above assume Firebase Authentication is implemented and each document
// that needs user-specific access control has a 'userId' field matching `request.auth.uid`.
